import pygame
import numpy

class DroneEnvironment:
    def __init__(self, num_drones=3, num_spillages=5):
        """
        Initializes the 2D simulation environment with drones and oil spillages.

        :param num_drones: Number of drones in the simulation.
        :param num_spillages: Number of oil spillages in the environment.
        """
        self.num_drones = num_drones
        self.num_spillages = num_spillages
        self.drones = []
        self.spillages = []
        self.state = None
        self.done = False

        # Pygame initialization
        pygame.init()
        self.screen = pygame.display.set_mode((WINDOW_SIZE, WINDOW_SIZE))
        pygame.display.set_caption("Drone Oil Spillage Detection")
        self.clock = pygame.time.Clock()

        # Initialize drones and oil spillages
        self.initialize_drones()
        self.initialize_spillages()

    def initialize_spillages(self):
        """Initialize oil spillages at random positions."""
        for _ in range(self.num_spillages):
            x, y = np.random.uniform(0, WINDOW_SIZE), np.random.uniform(0, WINDOW_SIZE)
            spillage = OilSpillage((x, y))  # Create an oil spillage
            self.spillages.append(spillage)

    def step(self, actions):
        """
        Move drones based on actions and check for oil spillage detection.
        :param actions: List of actions for each drone.
        :return: State, rewards, done flag, and additional info.
        """
        rewards = []
        for i, action in enumerate(actions):
            if action == 1: self.drones[i][1] -= 5  # Move up
            elif action == 2: self.drones[i][1] += 5  # Move down
            elif action == 3: self.drones[i][0] -= 5  # Move left
            elif action == 4: self.drones[i][0] += 5  # Move right

            # Keep drones within bounds
            self.drones[i] = np.clip(self.drones[i], 0, WINDOW_SIZE)

            # Check for spillage detection
            reward = 0
            for spillage in self.spillages:
                if not spillage.detected:
                    distance = np.linalg.norm(self.drones[i] - spillage.position)
                    if distance <= DETECTION_RADIUS:
                        spillage.detected = True
                        reward += 10  # Reward for detecting a spillage
            rewards.append(reward)

        return self.get_state(), rewards, self.done, {}

    def render(self):
        """Render the environment using Pygame."""
        self.screen.fill((255, 255, 255))  # Clear screen with white background

        # Draw oil spillages
        for spillage in self.spillages:
            color = (255, 0, 0) if not spillage.detected else (0, 255, 0)  # Red for undetected, Green for detected
            pygame.draw.circle(self.screen, color, spillage.position.astype(int), SPILL_RADIUS)

        # Draw drones
        for drone in self.drones:
            pygame.draw.circle(self.screen, (0, 0, 255), drone.astype(int), DRONE_RADIUS)

        # Draw detection radius
        for drone in self.drones:
            pygame.draw.circle(self.screen, (0, 0, 255, 50), drone.astype(int), DETECTION_RADIUS, 1)

        pygame.display.flip()
        self.clock.tick(FPS)

    def close(self):
        """Close the Pygame window."""
        pygame.quit()


<<<<<<< HEAD
=======

######################################

from test_qlearn import DroneAgent

# Initialize environment and agent
env = DroneEnvironment(num_drones=3, num_spillages=5)
agent = DroneAgent(state_dim=2, action_dim=5)  # State dim = 2 (x, y), 5 actions

num_episodes = 10  # Keep fewer episodes for Pygame visualization
try:
    for episode in range(num_episodes):
        env.reset()
        done = False
        total_reward = 0
        step = 0

        while not done:
            # Handle Pygame events to allow window closing
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    done = True
                    env.done = True

            state = env.get_state()
            actions = [agent.select_action(s) for s in state]  # Actions for each drone
            next_state, rewards, done, _ = env.step(actions)

            # Update agent
            for i, reward in enumerate(rewards):
                agent.store_transition(state[i], actions[i], reward, next_state[i], done)
            agent.train_step()

            total_reward += sum(rewards)
            step += 1

            # Render environment
            env.render()

        print(f"Episode {episode + 1}, Total Reward: {total_reward}")

finally:
    # Ensure resources are released
    env.close()

#############################

import pygame
import numpy as np

# Constants for visualization
WINDOW_SIZE = 500
DRONE_RADIUS = 10
SPILL_RADIUS = 15
DETECTION_RADIUS = 50
FPS = 30

class DroneEnvironment:
    def __init__(self, num_drones=3, num_spillages=5):
        self.num_drones = num_drones
        self.num_spillages = num_spillages
        self.drones = []
        self.spillages = []
        self.done = False

        # Initialize Pygame
        pygame.init()
        self.screen = pygame.display.set_mode((WINDOW_SIZE, WINDOW_SIZE))
        pygame.display.set_caption("Drone Oil Spillage Detection")
        self.clock = pygame.time.Clock()

        # Initialize drones and spillages
        self.initialize_drones()
        self.initialize_spillages()

    def initialize_drones(self):
        """Initialize drones at random positions."""
        self.drones = [np.random.uniform(0, WINDOW_SIZE, 2) for _ in range(self.num_drones)]

    def initialize_spillages(self):
        """Initialize oil spillages at random positions."""
        self.spillages = [{"position": np.random.uniform(0, WINDOW_SIZE, 2), "detected": False} for _ in range(self.num_spillages)]

    def reset(self):
        """Reset the environment."""
        self.initialize_drones()
        for spillage in self.spillages:
            spillage["detected"] = False

    def step(self, actions):
        """Move drones and check for oil spillage detection."""
        rewards = []
        for i, action in enumerate(actions):
            if action == 1: self.drones[i][1] -= 5  # Move up
            elif action == 2: self.drones[i][1] += 5  # Move down
            elif action == 3: self.drones[i][0] -= 5  # Move left
            elif action == 4: self.drones[i][0] += 5  # Move right

            # Keep drones within bounds
            self.drones[i] = np.clip(self.drones[i], 0, WINDOW_SIZE)

            # Check for spillage detection
            reward = 0
            for spillage in self.spillages:
                if not spillage["detected"]:
                    distance = np.linalg.norm(self.drones[i] - spillage["position"])
                    if distance <= DETECTION_RADIUS:
                        spillage["detected"] = True
                        reward += 10
            rewards.append(reward)

        return self.get_state(), rewards, self.done, {}

    def get_state(self):
        """Return the current positions of the drones."""
        return np.array(self.drones)

    def render(self):
        """Render the environment using Pygame."""
        self.screen.fill((255, 255, 255))  # Clear screen with white background

        # Draw oil spillages
        for spillage in self.spillages:
            color = (255, 0, 0) if not spillage["detected"] else (0, 255, 0)  # Red for undetected, Green for detected
            pygame.draw.circle(self.screen, color, spillage["position"].astype(int), SPILL_RADIUS)

        # Draw drones
        for drone in self.drones:
            pygame.draw.circle(self.screen, (0, 0, 255), drone.astype(int), DRONE_RADIUS)

        # Draw detection radius
        for drone in self.drones:
            pygame.draw.circle(self.screen, (0, 0, 255, 50), drone.astype(int), DETECTION_RADIUS, 1)

        pygame.display.flip()
        self.clock.tick(FPS)

    def close(self):
        """Close the Pygame window."""
        pygame.quit()
>>>>>>> 85d5d2829034ef89b3c8e5b188925ab2730f03d0
